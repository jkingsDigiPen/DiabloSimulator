<Application x:Class="DiabloSimulator.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
						 xmlns:sw="clr-namespace:DiabloSimulator.StyleableWindow"
             StartupUri="Windows\MainWindow.xaml">
	<Application.Resources>
		<!--Fonts packaged with the application-->
		<FontFamily x:Key="VollkornSC">pack://application:,,,/Fonts/#Vollkorn SC</FontFamily>

		<!--the brushes used in the template (use these to customize the window look along with the window style (see the bottom of this file)-->
		<SolidColorBrush x:Key="WindowColor" Color="GhostWhite"/>
		<SolidColorBrush x:Key="WindowBackColor" Color="#191919"/>
		<SolidColorBrush x:Key="WindowForeColor" Color="GhostWhite"/>
		<SolidColorBrush x:Key="WindowForeHighlightColor" Color="WhiteSmoke"/>
		<SolidColorBrush x:Key="WindowButtonColor" Color="DarkRed"/>
		<SolidColorBrush x:Key="WindowButtonOverColor" Color="Red"/>
		<SolidColorBrush x:Key="WindowButtonPressedColor" Color="DarkSlateGray"/>
		<SolidColorBrush x:Key="WindowToolbarColor" Color="#303030"/>

		<!--The window template and it's components -->
		<sw:WindowMinimizeCommand x:Key="MinimizeCommand"></sw:WindowMinimizeCommand>
		<sw:WindowMaximizeCommand x:Key="MaximizeCommand"></sw:WindowMaximizeCommand>
		<sw:WindowCloseCommand x:Key="CloseCommand"></sw:WindowCloseCommand>

		<!-- Window Button Template-->
		<Style TargetType="{x:Type Button}" x:Key="WindowButton">
			<Setter Property="Height" Value="25"/>
			<Setter Property="Width" Value="25"/>
			<Setter Property="Background" Value="{StaticResource WindowBackColor}"/>
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Background" Value="{StaticResource WindowToolbarColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowButtonPressedColor}"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Window Icon Template-->
		<Style TargetType="{x:Type Image}" x:Key="WindowIcon">
			<Setter Property="Height" Value="25"/>
			<Setter Property="Width" Value="25"/>
		</Style>

		<!-- Button Template-->
		<Style TargetType="{x:Type Button}">
			<Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
			<Setter Property="FontWeight" Value="SemiBold"/>
			<Setter Property="FontSize" Value="16"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border Background="{TemplateBinding Background}">
							<ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="Background" Value="{StaticResource WindowToolbarColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
							</Trigger>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Radio Button Template-->
		<Style TargetType="{x:Type RadioButton}">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type RadioButton}">
						<BulletDecorator Cursor="Hand">
							<BulletDecorator.Bullet>
								<!--Define size of the Bullet-->
								<Grid Height="16" Width="16">
									<!--The two borders-->
									<Border Name="RadioOuter" Background="Transparent" BorderBrush="Gainsboro" BorderThickness="2" CornerRadius="2" />
									<Border CornerRadius="0" Margin="4" Name="RadioMark" Background="#FFADADAD" Visibility="Hidden" />
								</Grid>
							</BulletDecorator.Bullet>

							<!--Text element-->
							<TextBlock Margin="3,1,0,0" FontSize="16" FontWeight="SemiBold">
								<ContentPresenter />
							</TextBlock>
						</BulletDecorator>

						<!--If item is checked, trigger the visibility of the mark-->
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="true">
								<!--If item is checked, trigger the visibility of the mark
								and change the color of the selected bullet into a darker gray for better highlighting-->
								<Setter TargetName="RadioMark" Property="Visibility" Value="Visible"/>
								<Setter TargetName="RadioOuter" Property="BorderBrush" Value="#FFADADAD" />
							</Trigger>

						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		
		<!-- TabItem Template -->
		<Style TargetType="{x:Type TabItem}">
			<Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="TabItem">
						<Border Name="Border" BorderThickness="1,1,1,0" BorderBrush="Gainsboro" CornerRadius="4,4,0,0" Margin="2,0">
							<ContentPresenter x:Name="ContentSite"
                  VerticalAlignment="Center"
                  HorizontalAlignment="Center"
                  ContentSource="Header"
                  Margin="10,2"/>
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsSelected" Value="True">
								<Setter TargetName="Border" Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
							</Trigger>
							<Trigger Property="IsSelected" Value="False">
								<Setter TargetName="Border" Property="Background" Value="{StaticResource WindowButtonColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter TargetName="Border" Property="Background" Value="{StaticResource WindowToolbarColor}"/>
								<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<!-- Misc Styles-->
		<Style TargetType="{x:Type Grid}">
			<Setter Property="Background" Value="{StaticResource WindowBackColor}"/>
		</Style>
		
		<Style TargetType="{x:Type Label}">
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
		</Style>

		<Style TargetType="{x:Type TextBlock}">
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
			<Setter Property="TextWrapping" Value="WrapWithOverflow"/>
		</Style>
		
		<Style TargetType="{x:Type ListBox}">
			<Setter Property="Background" Value="{StaticResource WindowBackColor}"/>
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
		</Style>

		<Style TargetType="{x:Type ListView}">
			<Setter Property="Background" Value="{StaticResource WindowBackColor}"/>
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
			<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
			<Setter Property="ItemTemplate">
				<Setter.Value>
					<DataTemplate>
						<TextBlock Text="{Binding}"/>
					</DataTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		
		<Style TargetType="{x:Type ListBoxItem}">
			<Setter Property="Background" Value="{StaticResource WindowToolbarColor}"/>
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
		</Style>

		<Style TargetType="{x:Type ListViewItem}">
			<Setter Property="Background" Value="{StaticResource WindowToolbarColor}"/>
			<Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
			<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
			<Setter Property="TextBlock.TextWrapping" Value="Wrap"/>
		</Style>

		<Style TargetType="{x:Type Border}">
			<Setter Property="BorderBrush" Value="DarkGray"/>
			<Setter Property="BorderThickness" Value="2"/>
		</Style>

		<!--Window Template - Allows maximize -->
		<ControlTemplate x:Key="MaxWindowTemplate" TargetType="{x:Type Window}">
			<Grid Background="{StaticResource WindowToolbarColor}">
				<Grid Background="{StaticResource WindowToolbarColor}">
					<Grid.RowDefinitions>
						<RowDefinition Height="30"/>
						<RowDefinition Height="*"/>
					</Grid.RowDefinitions>
					<Grid Grid.Row="0" Margin="5,0,5,0" Background="{StaticResource WindowToolbarColor}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="auto"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="75"/>
						</Grid.ColumnDefinitions>
						<Label Grid.Column="0" sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"                                               
							sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
							<Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                         
                     Width="16"
										 sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                           
                     sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
						</Label>
						<Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                  
                      HorizontalContentAlignment="Center"
                      VerticalContentAlignment="Center"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      Foreground="{StaticResource WindowForeColor}"                                           
                      FontSize="16"
											sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
											sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
                      sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
											sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                      sw:ShowSystemMenuBehavior.RightButtonShow="true">
						</Label>
						<StackPanel Grid.Column="2" Orientation="Horizontal">
							<Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}"
											Command="{StaticResource MinimizeCommand}" 
											CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">-</Button>
							<Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}"
											Command="{StaticResource MaximizeCommand}" 
											CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">+</Button>
							<Button DockPanel.Dock="Right"  Style="{StaticResource WindowButton}"
											Command="{StaticResource CloseCommand}" 
											CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">X</Button>
						</StackPanel>
					</Grid>
					<Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Grid>
							<AdornerDecorator>
								<ContentPresenter x:Name="WindowContent"/>
							</AdornerDecorator>
							<ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
						</Grid>
					</Border>
				</Grid>
				<Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" />
				<Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" />
				<Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" />
				<Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" />
				<Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" />
				<Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" />
				<Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" />
				<Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" />
			</Grid>
			<ControlTemplate.Triggers>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
						<Condition Property="WindowState" Value="Normal"/>
					</MultiTrigger.Conditions>
					<Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
				</MultiTrigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>

		<!--Window Template - Disallows maximize -->
		<ControlTemplate x:Key="FixedWindowTemplate" TargetType="{x:Type Window}">
			<Grid Background="{StaticResource WindowToolbarColor}">
				<Grid Background="{StaticResource WindowToolbarColor}">
					<Grid.RowDefinitions>
						<RowDefinition Height="30"/>
						<RowDefinition Height="*"/>
					</Grid.RowDefinitions>
					<Grid Grid.Row="0" Margin="5,0,5,0" Background="{StaticResource WindowToolbarColor}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="auto"/>
							<ColumnDefinition Width="*"/>
							<ColumnDefinition Width="75"/>
						</Grid.ColumnDefinitions>
						<Label Grid.Column="0" sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"                                               
							sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
							<Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                         
                     Width="16"
										 sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                           
                     sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
						</Label>
						<Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                  
                      HorizontalContentAlignment="Center"
                      VerticalContentAlignment="Center"
                      HorizontalAlignment="Stretch"
                      VerticalAlignment="Stretch"
                      Foreground="{StaticResource WindowForeColor}"                                           
                      FontSize="16"
											sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
											sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                      sw:ShowSystemMenuBehavior.RightButtonShow="true">
						</Label>
						<StackPanel Grid.Column="2" Orientation="Horizontal">
							<Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}"
											Command="{StaticResource MinimizeCommand}" 
											CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">-</Button>
							<Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" IsEnabled="False">+</Button>
							<Button DockPanel.Dock="Right"  Style="{StaticResource WindowButton}"
											Command="{StaticResource CloseCommand}" 
											CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">X</Button>
						</StackPanel>
					</Grid>
					<Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
						<Grid>
							<AdornerDecorator>
								<ContentPresenter x:Name="WindowContent"/>
							</AdornerDecorator>
							<ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
						</Grid>
					</Border>
				</Grid>
				<Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" />
				<Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" />
				<Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" />
				<Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" />
				<Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" />
				<Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" />
				<Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" />
				<Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" />
			</Grid>
			<ControlTemplate.Triggers>
				<MultiTrigger>
					<MultiTrigger.Conditions>
						<Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
						<Condition Property="WindowState" Value="Normal"/>
					</MultiTrigger.Conditions>
					<Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
				</MultiTrigger>
			</ControlTemplate.Triggers>
		</ControlTemplate>

		<!--Custom Window Style-->
		<Style x:Key="MaxWindowStyle" TargetType="{x:Type Window}">
			<Setter Property="WindowStyle" Value="None"/>
			<Setter Property="AllowsTransparency" Value="True"/>
			<Setter Property="MinWidth" Value="200"/>
			<Setter Property="MinHeight" Value="46"/>
			<!--CaptionHeight + ResizeBorderThickness * 2-->
			<Setter Property="Background" Value="SlateGray"/>
			<Setter Property="BorderBrush" Value="DarkGray"/>
			<Setter Property="BorderThickness" Value="7"/>
			<Setter Property="Template" Value="{StaticResource MaxWindowTemplate}"/>
			<Setter Property="FontFamily" Value="{StaticResource VollkornSC}"/>
			<Setter Property="FontSize" Value="14"/>
		</Style>
		
		<!--Custom Window Style-->
		<Style x:Key="FixedWindowStyle" TargetType="{x:Type Window}">
			<Setter Property="WindowStyle" Value="None"/>
			<Setter Property="AllowsTransparency" Value="True"/>
			<Setter Property="MinWidth" Value="200"/>
			<Setter Property="MinHeight" Value="46"/>
			<!--CaptionHeight + ResizeBorderThickness * 2-->
			<Setter Property="Background" Value="SlateGray"/>
			<Setter Property="BorderBrush" Value="DarkGray"/>
			<Setter Property="BorderThickness" Value="7"/>
			<Setter Property="Template" Value="{StaticResource FixedWindowTemplate}"/>
			<Setter Property="FontFamily" Value="{StaticResource VollkornSC}"/>
			<Setter Property="FontSize" Value="14"/>
		</Style>

	</Application.Resources>
</Application>

	